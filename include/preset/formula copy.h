#ifndef FORMULA_H
#define FORMULA_H

#include <string>
#include <vector>

static const std::vector<std::string> formula = {
    "Src -> Imports Global Functions Main",
    // 定义开始
    "Imports -> Import Imports",
    "Imports -> ε",
    "Import -> import < Identifier >",
    "Main -> main ( Parameters ) { Statements }",
    "Global -> global ( Parameters ) { Statements }",
    "Global -> ε",
    "Functions -> Function FunctionPrime",
    "FunctionPrime -> Function",
    "FunctionPrime -> ε",
    "Function -> TypeFull identifier ( Parameters ) { Statements }",
    "Function -> Container identifier ( Parameters ) { Statements }",
    "Function -> ε",
    // 定义函数
    "Statements -> Statement Statements",
    "Statements -> ε",
    "Statement -> return Expression ;",

    "Parameters -> Parameter ParameterPrime",
    "Parameters -> ε",
    "ParameterPrime -> , ParametersPrime",
    "ParameterPrime -> ε",
    "ParametersPrime -> TypeFull Assignment ",
    "ParametersPrime -> Container Assignment ",

    "Statement -> Parameter ;",
    "Parameter -> TypeFull Assignments ",
    "Parameter -> Container Assignments ",
    "Assignments -> Assignment AssignmentPrime",
    "AssignmentPrime -> , Assignment",
    "AssignmentPrime -> ε",
    "Assignment -> Identifier = Expression",
    "Assignment -> Identifier",
    // 定义函数参数
    "Statement -> using Namespace ;",
    "Namespace -> identifier",
    "Identifier -> identifier IdentifierPrime",
    "IdentifierPrime -> :: Identifier",
    "IdentifierPrime -> ε",
    // 定义命名规则
    "TypeFull -> Namespace :: TypePrime",
    "TypeFull -> TypePrime",
    "TypePrime -> const TypeBase",
    "TypePrime -> static TypeBase",
    "TypePrime -> TypeBase",
    "TypeBase -> Type TypeBasePrime",
    "TypeBasePrime -> &",
    "TypeBasePrime -> *",
    "TypeBasePrime -> ε",
    "Type -> Identifier",
    "Type -> char",
    "Type -> short",
    "Type -> int",
    "Type -> long",
    "Type -> double",
    // 定义类型规则
    "Container -> Namespace :: ContainerType < TypeFull > ",
    "Container -> ContainerType < TypeFull >",
    "ContainerType -> vector",
    "ContainerType -> map",
    "ContainerType -> set",
    "ContainerType -> stack",
    "ContainerType -> queue",
    "ContainerType -> deque",
    // 定义容器规则
    "Statement -> Identifier OStreams ;",
    "Statement -> Identifier IStreams ;",
    "OStream -> << String",
    "OStream -> << Identifier",
    "OStreams -> OStream OStreams",
    "OStreams -> ε",
    "IStream -> >> Identifier",
    "IStreams -> IStream IStreams",
    "IStreams -> ε",
    // 定义流操作
    "Statement -> if ( Condition ) { Statements } ElseStatements",
    "ElseStatements -> ElseStatement ElseStatements",
    "ElseStatements -> ε",
    "ElseStatement -> else { Statements } ",
    // 定义if语句
    "Statement -> while ( Condition ) do { Statements }",
    "Statement -> break ;",
    "Statement -> continue ;",
    "Statement -> switch ( Expression ) { CaseStatements }",
    "CaseStatement -> case Expression : Statements",
    "CaseStatement -> default : Statements",
    "CaseStatements -> CaseStatement CaseStatements",
    "CaseStatements -> ε",
    // 定义switch case语句
    "Statement -> for ( ForStatement ) { Statements }",
    "ForStatement -> Assignment ; Condition ; Assignment",
    "ForStatement -> auto identifier : identifier",
    "ForStatement -> ε",
    // 定义for语句
    "Condition -> ConditionTerm ConditionPrime",
    "ConditionPrime -> && ConditionTerm ConditionPrime",
    "ConditionPrime -> || ConditionTerm ConditionPrime",
    "ConditionPrime -> ε",
    "ConditionTerm -> ! ConditionTerm",
    "ConditionTerm -> ( Condition )",
    "ConditionTerm -> Expression < Expression",
    "ConditionTerm -> Expression <= Expression",
    "ConditionTerm -> Expression > Expression",
    "ConditionTerm -> Expression >= Expression",
    "ConditionTerm -> Expression == Expression",
    "ConditionTerm -> Expression != Expression",
    // 定义条件语句
    "Expression -> Term ExpressionPrime",
    "ExpressionPrime -> + Term ExpressionPrime",
    "ExpressionPrime -> - Term ExpressionPrime",
    "ExpressionPrime -> ε",
    "Term -> Factor TermPrime",
    "TermPrime -> * Factor TermPrime",
    "TermPrime -> / Factor TermPrime",
    "TermPrime -> ε",
    "Factor -> ( Expression )",
    "Factor -> Identifier ",
    "Factor -> intNumber ",
    "Factor -> floatNumber ",
    "Factor -> string ",
    "Factor -> FunctionCalls",
    "Factor -> Identifier . identifier",
    "Factor -> Identifier -> identifier",
    "Factor -> Identifier [ Expression ]",
    // 定义表达式
    "FunctionCalls -> FunctionCall FunctionCallsPrime",
    "FunctionCallsPrime -> . FunctionCall FunctionCallsPrime",
    "FunctionCallsPrime -> ε",
    "FunctionCall -> identifier ( Parameters )",
    // 定义函数调用
    "Statement -> class Identifier { ClassStatements } ;",
    "ClassStatements -> ClassStatement ClassStatements",
    "ClassStatements -> ε",
    "ClassStatement -> Function",
    "ClassStatement -> Parameters",
    // 定义类 结构体不需要了
    // identifier 和 number 由词法分析器提供
};

#endif   // FORMULA_H